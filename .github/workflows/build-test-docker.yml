name : Scripts Test and Push

env:
  IMAGE_NAME: digitalearthpacific/dep-wofs

on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - created

jobs:
  test:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check formatting
      uses: rickstaa/action-black@v1
      id: action_black
      with:
        black_args: "--check src"

    # Set up a cache
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: pat-s/always-upload-cache@v2.1.5
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Test Docker
      uses: docker/build-push-action@v2
      with:
        context: .
        tags: ghcr.io/${{ env.IMAGE_NAME }}
        outputs: type=docker
        cache-from: |
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=local,dest=/tmp/.buildx-cache-new

    # This ugly bit is necessary if you don't want your cache to grow forever
    # till it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # - name: Run tests in image
    #   run: |
    #       docker run --rm ${{ env.IMAGE_NAME }} bash -c "pip install -e /code; pip install -r /code/requirements-test.txt; pytest /code"

  push:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get version number for tagging the image
        run: |
          git fetch --all --tags
          echo "VERSION=$(git describe --tags)" >> $GITHUB_ENV

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:latest,ghcr.io/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
